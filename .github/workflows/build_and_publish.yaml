name: Build and publish to Docker Hub

on:
  push:
    branches:
      - "main"

env:
  # Account to host the images on docker hub:
  TARGET_ACCOUNT: ghga

jobs:

  build_and_push:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2
        name: Check out code
        with:
          # fetch the entire history
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v1
        name: Set up QEMU

      - uses: docker/setup-buildx-action@v1
        name: Set up Docker Buildx

      - uses: docker/login-action@v1
        name: Login to DockerHub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: iterate_through_containers
        run: |
          set -e
          cd images

          # First build all images:
          TAGS_TO_PUSH=()
          for IMAGE_NAME in *
          do
            VERSION="$( cat ./${IMAGE_NAME}/.version )"
            VERSION_TAG="${TARGET_ACCOUNT}/${IMAGE_NAME}:${VERSION}"
            LATEST_TAG="${TARGET_ACCOUNT}/${IMAGE_NAME}:latest"

            if docker manifest inspect "${VERSION_TAG}" > /dev/null 2>&1
            then 
              echo ">>> Skipping Image \"${IMAGE_NAME}\": the specified tag \"${VERSION_TAG}\" already exist on Docker Hub."
            else
              echo ">>> Building image \"${IMAGE_NAME}\" version \"${VERSION}\""
              docker build -t "${VERSION_TAG}" -t "${LATEST_TAG}" "./${IMAGE_NAME}"

              # add tags to TAGS_TO_PUSH array:
              TAGS_TO_PUSH+=( "${VERSION_TAG}" )
              TAGS_TO_PUSH+=( "${LATEST_TAG}" )
            fi
          done

          # If all images where build successfully, push them:
          for TAG in ${TAGS_TO_PUSH[@]}
          do
            echo ">>> Pushing \"${TAG}\" to docker hub"
            docker push "${TAG}"
          done
